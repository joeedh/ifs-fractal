{
  "version": 3,
  "sources": ["../scripts/path.ux/scripts/path-controller/util/html5_fileapi.js", "../scripts/path.ux/scripts/platforms/platform_base.js"],
  "sourcesContent": ["export function saveFile(data, filename=\"unnamed\", exts=[], mime=\"application/x-octet-stream\") {\r\n  let blob = new Blob([data], {type : mime});\r\n  let url = URL.createObjectURL(blob);\r\n\r\n  let a = document.createElement(\"a\");\r\n  a.setAttribute(\"href\", url);\r\n  a.setAttribute(\"download\", filename);\r\n\r\n  a.click();\r\n}\r\n\r\n//returns a promise\r\nexport function loadFile(filename=\"unnamed\", exts=[]) {\r\n  let input = document.createElement(\"input\");\r\n  input.type = \"file\";\r\n\r\n  exts = exts.join(\",\");\r\n\r\n  input.setAttribute(\"accept\", exts)\r\n  return new Promise((accept, reject) => {\r\n    input.onchange = function(e) {\r\n      if (this.files === undefined || this.files.length !== 1) {\r\n        reject(\"file load error\");\r\n        return;\r\n      }\r\n\r\n      let file = this.files[0];\r\n      let reader = new FileReader();\r\n\r\n      reader.onload = function(e2) {\r\n        accept(e2.target.result);\r\n      };\r\n\r\n      reader.readAsArrayBuffer(file);\r\n    }\r\n    input.click();\r\n  });\r\n}\r\n\r\nwindow._testLoadFile = function(exts=[\"*.*\"]) {\r\n  loadFile(undefined, exts).then((data) => {\r\n    console.log(\"got file data:\", data);\r\n  });\r\n};\r\n\r\nwindow._testSaveFile = function() {\r\n  let buf = _appstate.createFile();\r\n  //console.log(buf);\r\n  saveFile(buf, \"unnamed.w3d\", [\".w3d\"]);\r\n}", "export const mimeMap = {\r\n  \".js\"  : \"application/javascript\",\r\n  \".json\": \"text/json\",\r\n  \".html\": \"text/html\",\r\n  \".txt\" : \"text/plain\",\r\n  \".jpg\" : \"image/jpeg\",\r\n  \".png\" : \"image/png\",\r\n  \".tiff\": \"image/tiff\",\r\n  \".gif\" : \"image/gif\",\r\n  \".bmp\" : \"image/bitmap\",\r\n  \".tga\" : \"image/targa\",\r\n  \".svg\" : \"image/svg+xml\",\r\n  \".xml\" : \"text/xml\",\r\n  \".webp\": \"image/webp\",\r\n  \"svg\"  : \"image/svg+xml\",\r\n  \"txt\"  : \"text/plain\",\r\n  \"html\" : \"text/html\",\r\n  \"css\"  : \"text/css\",\r\n  \"ts\"   : \"application/typescript\",\r\n  \"py\"   : \"application/python\",\r\n  \"c\"    : \"application/c\",\r\n  \"cpp\"  : \"application/cpp\",\r\n  \"cc\"   : \"application/cpp\",\r\n  \"h\"    : \"application/c\",\r\n  \"hh\"   : \"application/cpp\",\r\n  \"hpp\"  : \"application/cpp\",\r\n  \"sh\"   : \"application/bash\",\r\n  \"mjs\"  : \"application/javascript\",\r\n  \"cjs\"  : \"application/javascript\",\r\n  \"gif\"  : \"image/gif\"\r\n};\r\n\r\nexport var textMimes = new Set([\r\n  \"application/javascript\", \"application/x-javscript\",\r\n  \"image/svg+xml\", \"application/xml\"\r\n]);\r\n\r\nexport function isMimeText(mime) {\r\n  if (!mime) {\r\n    return false;\r\n  }\r\n\r\n  if (mime.startsWith(\"text\")) {\r\n    return true;\r\n  }\r\n\r\n  return textMimes.has(mime);\r\n}\r\n\r\nexport function getExtension(path) {\r\n  if (!path) {\r\n    return \"\";\r\n  }\r\n\r\n  let i = path.length;\r\n  while (i > 0 && path[i] !== \".\") {\r\n    i--;\r\n  }\r\n\r\n  return path.slice(i, path.length).trim().toLowerCase();\r\n}\r\n\r\nexport function getMime(path) {\r\n  let ext = getExtension(path);\r\n  if (ext in mimeMap) {\r\n    return mimeMap[ext];\r\n  }\r\n\r\n  return \"application/x-octet-stream\";\r\n}\r\n\r\nexport class PlatformAPI {\r\n  static writeFile(data, handle, mime) {\r\n    throw new Error(\"implement me\");\r\n    //returns a promise\r\n  }\r\n\r\n  static resolveURL(path, base = location.href) {\r\n    base = base.trim();\r\n\r\n    if (path.startsWith(\"./\")) {\r\n      path = path.slice(2, path.length).trim();\r\n    }\r\n\r\n    while (path.startsWith(\"/\")) {\r\n      path = path.slice(1, path.length).trim();\r\n    }\r\n\r\n    while (base.endsWith(\"/\")) {\r\n      base = base.slice(0, base.length - 1).trim();\r\n    }\r\n\r\n    let exts = [\"html\", \"txt\", \"js\", \"php\", \"cgi\"]\r\n    for (let ext of exts) {\r\n      ext = \".\" + ext;\r\n      if (base.endsWith(ext)) {\r\n        let i = base.length - 1;\r\n        while (i > 0 && base[i] !== \"/\") {\r\n          i--;\r\n        }\r\n\r\n        base = base.slice(0, i).trim();\r\n      }\r\n    }\r\n\r\n    while (base.endsWith(\"/\")) {\r\n      base = base.slice(0, base.length - 1).trim();\r\n    }\r\n\r\n    path = (base + \"/\" + path).split(\"/\")\r\n    let path2 = [];\r\n\r\n    for (let i = 0; i < path.length; i++) {\r\n      if (path[i] === \"..\") {\r\n        path2.pop();\r\n      } else {\r\n        path2.push(path[i]);\r\n      }\r\n    }\r\n\r\n    return path2.join(\"/\");\r\n  }\r\n\r\n  //returns a promise that resolves to a FilePath that can be used for re-saving.\r\n  static showOpenDialog(title, args = new FileDialogArgs()) {\r\n    throw new Error(\"implement me\");\r\n  }\r\n\r\n  //returns a promise\r\n  static showSaveDialog(title, savedata_cb, args = new FileDialogArgs()) {\r\n    throw new Error(\"implement me\");\r\n  }\r\n\r\n  //returns a promise.  if mime is a text type, a string will be fed to the promise,\r\n  //otherwise it will be an ArrayBuffer\r\n  static readFile(path, mime) {\r\n    throw new Error(\"implement me\");\r\n  }\r\n}\r\n\r\nexport class FileDialogArgs {\r\n  constructor() {\r\n    this.multi = false; //allow selecting multiple files\r\n    this.addToRecentList = false; //update recent file list\r\n\r\n    /* example for filters:\r\n    [{\r\n      name : \"Images\",\r\n      mime : \"image/png\"\r\n      extensions : \"[\"png\", \"jpg\"]\r\n    }]\r\n    * */\r\n    this.filters = []\r\n  }\r\n}\r\n\r\n/*a file path, some platforms may not return real payhs*/\r\nexport class FilePath {\r\n  constructor(data, filename = \"unnamed\") {\r\n    this.data = data;\r\n    this.filename = filename;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
